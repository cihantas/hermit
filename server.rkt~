#lang racket

(require racket/tcp
         (for-syntax syntax/parse))

; Add syntax for definition of multiple variables in a single expression. 
(define-syntax (define* stx)
  (syntax-parse stx
    [(_define* (~seq x:id e:expr) ...)
     (syntax/loc stx
       (begin
         (define x e)
         ...))]))

(define*
  SERVER-NAME "Racket"
  VERSION "1.0.0a"
  PORT (or (getenv "PORT") 6667)
  PASS "secret")

(define*
  RPL_WELCOME "001"
  RPL_YOURHOST "002"
  RPL_CREATED "003"
  RPL_MYINFO "004"
  ERR_UNKNOWNCOMMAND "421"
  ERR_ERRONEUSNICKNAME "432"
  ERR_NEEDMOREPARAMS "461")

; TODO: Replace this with proper logging.
(define (log-debug str)
  (displayln str))

(define (start)  
  (define main-cust (make-custodian))
  (parameterize ([current-custodian main-cust])
    (define listener (tcp-listen PORT 5 #t))
    (log-debug "Listening...")

    ; Handle incoming connections on a new thread.
    (define (loop)
      (accept-and-handle listener)
      (loop))
    (thread loop))

  ; Return a function to stop the server.
  ; TODO Stop the server on SIGINT, SIGTERM.
  (lambda ()
    (custodian-shutdown-all main-cust)))

(define (accept-and-handle listener)
  ; Accept blocks until a connection can be accepted. 
  (define-values (in out) (tcp-accept listener))
  (log-debug "Client connected.")

  (define cust (make-custodian))
  (parameterize ([current-custodian cust])
    (define (loop)
      (handle-msg in out)
      (loop))
    (thread loop)))
#| (define (loop) |#
#|    (loop)) |#
#| (define t (thread loop)) |#
#| void) |#

(define (handle-msg in out)
  ; TODO: Read only 512 bytes.
  (let* ([msg-str (read-line in 'return-linefeed)]
         [msg (parse-msg msg-str)]
         [cmd (first msg)])
    (log-debug (string-append "< " msg-str))
    (case cmd
      [("NICK") (NICK out msg)]
      [("USER") (USER out msg)])))

(define (send-msg msg out)
  (let ([rpl (string-append (msg-to-str msg) "\r\n")])
    (display (string-append "> " rpl))
    (display rpl out)
    (flush-output out)))



; Parses an IRC message into ...
;
; According to RFC1459 Section 4.2.3.2 "Clients should not use prefix when
; sending a message from themselves; if they use a prefix, the only valid prefix
; is the registered nickname associated with the client.". Therefore the prefix
; can be ignored on client messages.
(define (parse-msg msg)
  ; Split the message on space, except after a <space><colon>.
  (let* ([x (string-split msg #rx" +:")]
         [y (append (string-split (car x) " ") (cdr x))])
    (if (string-prefix? (car y) ":") (rest y) y)))

;
(define (msg-to-str msg)
  (string-join msg " " #:before-last
               (if (string-contains? (last msg) " ") " :" " ")))

(define (PONG) "Not implemented.")

(define (NICK out msg)
  (define-values (nick) (second msg))
  #t)

(define (USER out msg)
  (match-define (list user host server name) (rest msg))
  (send-msg (list ":localhost" RPL_WELCOME "" "Welcome to the Internet Relay Network ctas!ctas@localhost") out)
  (send-msg (list ":localhost" RPL_YOURHOST (format "Your host is Hermit@~a." VERSION)) out)
  (send-msg (list ":localhost" RPL_CREATED "This server was created once upon a time.") out)
  (send-msg (list ":localhost" RPL_MYINFO "Racket") out))

(define (JOIN) "Not implemented.")

(define (PRIVMSG) "Not implemented.")

(provide parse-msg
         msg-to-str)

(define stop (start))